{"version":3,"sources":["stores/TodoModel.js","stores/TodoStore.js","component/todoEntry.js","component/todoItem.js","component/todoItems.js","component/todoFilters.js","App.js","serviceWorker.js","index.js"],"names":["TodoModel","store","title","completed","id","Object","classCallCheck","this","initializerDefineProperty","_descriptor","_descriptor2","todos","remove","observable","action","todoStore","lastID","push","filter","todo","TodoEntry","state","value","handleKeyDown","event","keyCode","preventDefault","addTodo","_this","target","_this2","react_default","a","createElement","className","onChange","setState","onKeyDown","type","placeholder","Component","TodoItem","observer","onToggle","props","toggle","itemDestroy","destroy","checked","onClick","TodoItems","applyFilter","map","todoItem","filters","TodoFilters","length","clearAllCompleted","todoActiveCounter","filtersAll","filtersActive","filtersCompleted","todoCompletedCounter","clearCompleted","console","log","App","todoEntry","todoItems","todoFilters","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.1470b52d.chunk.js","sourcesContent":["import {observable, action} from 'mobx'\n\nclass TodoModel {\n    store\n    id\n    @observable title\n    @observable completed\n\n    constructor(store,title,completed,id){\n        this.id = id\n        this.store = store\n        this.title = title\n        this.completed = completed\n    }\n\n    \n    @action\n    toggle(){\n        this.completed = !this.completed\n    }\n\n    @action\n    destroy(){\n        this.store.todos.remove(this)\n    }\n}\n\n\nexport default TodoModel","import { observable, action, computed } from 'mobx'\nimport TodoModel from \"./TodoModel\";\n\nclass TodoStore {\n    @observable todos = []\n    lastID = 0\n    @observable filters = 'All'\n\n    @action\n    addTodo(title) {\n        this.todos.push(new TodoModel(this, title, false, this.lastID++))\n    }\n\n    @action\n    clearAllCompleted(){\n        todoStore.todos = todoStore.todos.filter(todo => !todo.completed);\n    }\n    \n}\n\nconst todoStore = new TodoStore()\nexport default todoStore\n","import React, { Component } from 'react'\r\nimport todoStore from '../stores/TodoStore'\r\n\r\nclass TodoEntry extends Component {\r\n    state = {\r\n        value: \"\"\r\n    }\r\n\r\n    handleKeyDown = event => {\r\n        if (event.keyCode !== 13){\r\n            return;\r\n        }\r\n        event.preventDefault()\r\n        todoStore.addTodo(this.state.value)\r\n        event.target.value=\"\"\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <header className=\"header\" >\r\n                    <h1>todo</h1>\r\n                    <input\r\n                        onChange={event => this.setState({ value: event.target.value })}\r\n                        onKeyDown={\r\n                            event => this.handleKeyDown(event)\r\n                        }\r\n                        type=\"text\"\r\n                        className=\"new-todo\"\r\n                        placeholder=\"What needs to be done?\"\r\n                    />\r\n                </header>\r\n            </div>\r\n        );\r\n    }\r\n\r\n}\r\nexport default TodoEntry","import React, { Component } from 'react'\r\nimport { observer } from 'mobx-react'\r\n\r\n@observer\r\nclass TodoItem extends Component {\r\n    onToggle = () => {\r\n        this.props.todo.toggle()\r\n    }\r\n    itemDestroy = () => {\r\n        this.props.todo.destroy()\r\n    }\r\n    render() {\r\n        const { todo } = this.props /*a todo recieved*/\r\n        return (\r\n            <div>\r\n                <li className={todo.completed ? 'completed' : ' '} >\r\n                    <div className=\"view\" >\r\n                        <input\r\n                            onChange={this.onToggle}\r\n                            type=\"checkbox\"\r\n                            className=\"toggle\"\r\n                            value=\"on\"\r\n                            checked={todo.completed}\r\n                        />\r\n                        <label>{todo.title} </label>\r\n                        <button className=\"destroy\" onClick={this.itemDestroy} ></button>\r\n                    </div>\r\n                </li>\r\n            </div>\r\n        );\r\n    }\r\n\r\n}\r\nexport default TodoItem","import React, { Component } from 'react'\r\nimport TodoItem from './todoItem'\r\nimport todoStore from '../stores/TodoStore'\r\nimport { observer } from 'mobx-react'\r\n\r\n@observer\r\nclass TodoItems extends Component {\r\n    render() {\r\n        return (\r\n            <div>\r\n                <section className=\"completed\" >\r\n                    <ul className=\"todo-list\" >\r\n                        {\r\n                            this.applyFilter().map(todo => {\r\n                                return (\r\n                                    <TodoItem todo={todo} />\r\n                                )\r\n                            })\r\n                        }\r\n                    </ul>\r\n                </section>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    applyFilter() {\r\n        return todoStore.todos.filter(todo => {\r\n            switch (todoStore.filters) {\r\n                case 'All':\r\n                    return true\r\n                case 'Active':\r\n                    return !todo.completed\r\n                case 'Completed':\r\n                    return todo.completed;\r\n            }\r\n        })\r\n    }\r\n\r\n}\r\nexport default TodoItems","import React, { Component } from 'react'\r\nimport { observer } from 'mobx-react'\r\nimport todoStore from '../stores/TodoStore'\r\n\r\n@observer\r\nclass TodoFilters extends Component {\r\n\r\n    todoActiveCounter() {\r\n        return todoStore.todos.filter(todo => !todo.completed).length\r\n    }\r\n    todoCompletedCounter() {\r\n        return todoStore.todos.filter(todo => todo.completed).length\r\n    }\r\n    clearCompleted() {\r\n        return (\r\n            <button \r\n            className=\"clear-completed\"\r\n            onClick={todoStore.clearAllCompleted}\r\n            >\r\n                clear Completed\r\n            </button>\r\n        )\r\n    }\r\n    render() {\r\n        return (\r\n            <div className=\"footer\" >\r\n                <a className=\"todo-count\">\r\n                    {this.todoActiveCounter()} items left\r\n                </a>\r\n                <ul className=\"filters\" >\r\n                    <li>\r\n                        <a\r\n                            className={todoStore.filters === \"All\" ? 'selected' : ' '}\r\n                            onClick={this.filtersAll}\r\n                        >\r\n                            All\r\n                        </a>\r\n                    </li>\r\n                    <li>\r\n                        <a\r\n                            className={todoStore.filters === \"Active\" ? 'selected' : ' '}\r\n                            onClick={this.filtersActive}>\r\n                            Active\r\n                        </a>\r\n                    </li>\r\n                    <li>\r\n                        <a\r\n                            className={todoStore.filters === \"Completed\" ? 'selected' : ' '}\r\n                            onClick={this.filtersCompleted}>\r\n                            Completed\r\n                        </a>\r\n                    </li>\r\n                    {this.todoCompletedCounter() === 0 ? \"\" : this.clearCompleted()}\r\n                </ul>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    filtersAll() {\r\n        todoStore.filters = 'All'\r\n        console.log(todoStore.filters)\r\n    }\r\n    filtersActive() {\r\n        todoStore.filters = 'Active'\r\n        console.log(todoStore.filters)\r\n    }\r\n    filtersCompleted() {\r\n        todoStore.filters = 'Completed'\r\n        console.log(todoStore.filters)\r\n    }\r\n}\r\n\r\nexport default TodoFilters","import React, { Component } from 'react';\nimport { observer } from 'mobx-react'\nimport './App.css';\nimport TodoEntry from './component/todoEntry'\nimport TodoItems from './component/todoItems'\nimport TodoFilters from './component/todoFilters'\n\n@observer\nclass App extends Component {\n    render() {\n        return (\n            <div id=\"todoapp\" className=\"todoapp\" >\n                <TodoEntry />\n                <TodoItems/>\n                <TodoFilters/>\n            </div>\n        );\n\n    }\n}\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}